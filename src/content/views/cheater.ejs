<!-- Styles for the touch control overlays -->
<style>
  /* This container wraps the game and the controls to position them correctly. */
  #game-container {
    position: relative;
    /* Match the dimensions of the PIXI application from the script */
    width: 800px;
    height: 600px;
    /* Optional: helps center the game on the page */
    margin: 0 auto;
    margin-bottom: 64px;
  }

  /* The main container for the touch overlays. */
  .touch-controls {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
    /* Allows events to pass through the container's empty space. */
    pointer-events: none;
  }

  /* Common styling for each touch button. */
  .touch-button {
    position: absolute;
    background-color: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.4);
    border-radius: 50%;
    cursor: pointer;
    /* Re-enables pointer events for the buttons themselves. */
    pointer-events: auto;
    /* Removes the tap highlight on mobile browsers. */
    -webkit-tap-highlight-color: transparent;
    text-align: center;
    vertical-align: middle;
    user-select: none;
  }

  /* Visual feedback for when a button is being pressed. */
  .touch-button:active {
    background-color: rgba(255, 255, 255, 0.5);
  }

  /* Positioning for the 'Left' and 'Right' buttons on the bottom-left. */
  #touch-left {
    bottom: 20px;
    left: 20px;
    width: 80px;
    height: 80px;
    font-size: 50px;
  }
  #touch-right {
    bottom: 20px;
    left: 120px; /* 20px left + 80px width + 20px gap */
    width: 80px;
    height: 80px;
    font-size: 50px;
  }

  /* Positioning for the 'Up' button on the bottom-right. */
  #touch-up {
    bottom: 20px;
    right: 20px;
    width: 100px;
    height: 100px;
    font-size: 60px;
  }

  /* Styling for the Restart button */
  #restart-button {
    position: absolute;
    top: 10px;
    left: 10px;
    z-index: 20; /* Make sure it's on top of other elements */
    cursor: pointer;
    padding: 8px 16px;
  }

  /* MODIFIED: Styling for the new "Show Source" button */
  #show-source-button {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 20;
    cursor: pointer;
    padding: 8px 16px;
  }

  /* MODIFIED: Styling for the source code overlay */
  #source-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 100;
    /* Use flexbox to easily center the content */
    display: flex;
    justify-content: center;
    align-items: center;
    /* Hide it by default */
    display: none;
  }

  #source-content {
    position: relative;
    background-color: #333;
    color: #eee;
    padding: 20px;
    border-radius: 10px;
    width: 90%;
    height: 90%;
    display: flex; /* Allow the textarea to fill the space */
    flex-direction: column;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  }

  #source-content h3 {
    margin-top: 0;
    text-align: center;
    font-family: sans-serif;
  }

  #source-content textarea {
    flex-grow: 1; /* Make the textarea take all available vertical space */
    background-color: #1e1e1e;
    color: #d4d4d4;
    border: 1px solid #555;
    border-radius: 5px;
    padding: 10px;
  }

  #close-source-button {
    position: absolute;
    top: -15px;
    right: -15px;
    width: 35px;
    height: 35px;
    background-color: #079933;
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    line-height: 32px; /* Center the 'X' */
    text-align: center;
  }
</style>

<!-- The game canvas is now inside a container for positioning the overlays. -->
<div id="game-container" tabindex="1">
  <div id="game" style="outline: none"></div>

  <!-- The button is renamed and moved inside the game container -->
  <button id="restart-button" onclick="update()">
    <%= locale == 'de' ? 'Neustart' : 'Restart' %>
  </button>

  <!-- MODIFIED: New button to show the source code -->
  <button id="show-source-button" onclick="showSource()">
    <%= locale == 'de' ? 'Quellcode anzeigen' : 'Show sourcecode' %>
  </button>

  <!-- These are the new touch control overlays. -->
  <div class="touch-controls">
    <div id="touch-left" class="touch-button" onpointerdown="handleLeft()">
      ←
    </div>
    <div id="touch-up" class="touch-button" onpointerdown="handleUp()">↑</div>
    <div id="touch-right" class="touch-button" onpointerdown="handleRight()">
      →
    </div>
  </div>

  <!-- MODIFIED: The overlay for showing the source code. The textarea is moved inside. -->
  <div id="source-overlay">
    <div id="source-content">
      <button id="close-source-button" onclick="hideSource()">✓</button>
      <h3>Quellcode</h3>
      <textarea style="font-family: monospace" id="code">
const { Engine, World, Bodies, Body, Events } = Matter
const { Application, loader, extras, Sprite, Text } = PIXI

const engine = Engine.create(),
  world = engine.world,
  HOLZ = '/chals/chal63/holz.jpg',
  BALL = '/chals/chal63/ball.png'

window.app = new Application(800, 600, { backgroundColor: 0x1099bb })
$('game').replaceChildren(app.view)

function updateScore(newScore) {
  window.score = newScore
  window.setText(newScore.toString())
}

function initGame() {
  const status = new Text('Test')
  app.stage.addChild(status)
  status.x = 30
  status.y = 90

  window.setText = (text) => {
    status.text = text
  }

  // ============================================
  // ============== SCHAU MAL ===================
  // ============================================
  // = Hier wird die Start-Punkzahl festgelegt, =
  // = die könntest du z.B. auf 50 setzen.      =
  // ============================================
  updateScore(0)

  const woodTexture = loader.resources[HOLZ].texture

  function buildWoodBlock(x, y, w, h, id) {
    var block = new extras.TilingSprite(woodTexture, w, h)
    app.stage.addChild(block)
    Matter.World.add(
      world,
      Matter.Bodies.rectangle(x + w / 2, y + h / 2, w, h, {
        isStatic: true,
        id,
      })
    )
    block.x = x
    block.y = y
  }

  buildWoodBlock(0, 570, 800, 30, 1)
  buildWoodBlock(0, 170, 30, 400, 2)
  buildWoodBlock(770, 170, 30, 400, 3)
  buildWoodBlock(350, 50, 100, 100, 4)

  const ball = new Sprite(loader.resources[BALL].texture)
  ball.x = 300
  ball.y = 200
  ball.width = 100
  ball.height = 100
  ball.anchor.set(0.5)
  app.stage.addChild(ball)

  let border = undefined

  const circle = Bodies.circle(300, 200, 50, { restitution: 1, id: 5 })
  World.add(world, circle)
  Events.on(engine, 'collisionStart', (data) => {
    if (data.pairs[0].bodyA.id == 1 && data.pairs[0].bodyB.id == 5) {
      updateScore(0)
    } else if (data.pairs[0].bodyA.id == 2 && data.pairs[0].bodyB.id == 5) {
      if (border == undefined) border = 2

      if (data.pairs[0].bodyA.id == border) {
        updateScore(window.score + 1)
        border = 3
      }
    } else if (data.pairs[0].bodyA.id == 3 && data.pairs[0].bodyB.id == 5) {
      if (border == undefined) border = 3

      if (data.pairs[0].bodyA.id == border) {
        updateScore(window.score + 1)
        border = 2
      }
    }
  })

  function handleUp() {
    const angle = Math.random() * 40 - 20 - 90
    const r = (angle / 180) * Math.PI
    Body.applyForce(circle, circle.position, {
      x: Math.cos(r) * 0.24,
      y: Math.sin(r) * 0.24,
    })
  }

  function handleLeft() {
    Body.applyForce(circle, circle.position, { x: -0.2, y: -0.05 })
  }

  function handleRight() {
    Body.applyForce(circle, circle.position, { x: +0.2, y: -0.05 })
  }

  document.handleLeft = handleLeft
  document.handleUp = handleUp
  document.handleRight = handleRight

  $('game-container').onkeydown = (key) => {
    if (key.code == 'ArrowUp') {
      handleUp()
      key.preventDefault()
    }

    if (key.code == 'ArrowLeft') {
      handleLeft()
      key.preventDefault()
    }

    if (key.code == 'ArrowRight') {
      handleRight()
      key.preventDefault()
    }
  }

  $('game').focus()

  app.ticker.add(() => {
    Engine.update(engine)
    ball.x = circle.position.x
    ball.y = circle.position.y
  })
}

loader.reset().add(HOLZ).add(BALL).load(initGame)</textarea
      >
    </div>
  </div>
</div>

<script src="/pixi.min.js"></script>
<script src="/chals/chal63/matter.js"></script>

<script>
  window.$ = (s) => document.getElementById(s)
  function update() {
    window.app?.ticker.stop()
    eval(document.getElementById('code').value)
  }

  function checkDone() {
    if (window.score >= 100) {
      window.setText(
        'Die Antwort lautet ' +
          String.fromCharCode(83, 109, 117, 114, 102, 101, 110) +
          '.'
      )
    }
    setTimeout(checkDone, 10)
  }

  function showSource() {
    // We use 'flex' because that's what we used in the CSS to center it.
    $('source-overlay').style.display = 'flex'
  }

  function hideSource() {
    $('source-overlay').style.display = 'none'
    // Restart the game when the overlay is closed, as requested.
    update()
  }

  window.onload = () => {
    update()
    checkDone()
  }
</script>
