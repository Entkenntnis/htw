import { safeRoute } from '../../helper/helper.js'
import { renderPage } from '../../helper/render-page.js'

/**
 *
 * @param {number} active active index
 * @returns string
 */
export function renderNavigation(active) {
  return `
  <ul class="nav nav-tabs" style="margin-bottom: 24px;">
    <li class="nav-item">
      <a class="nav-link" style="color: #00bc8c; border: none;" href="/map">zurück</a>
    </li>
    <li class="nav-item">
      <a class="nav-link${active == 0 ? ' active' : ''}" href="/worms/two-player">2-Spieler</a>
    </li>
    <li class="nav-item">
      <a class="nav-link${active == 1 ? ' active' : ''}" href="/worms/single-player">Einzelspieler</a>
    </li>
    <li class="nav-item">
      <a class="nav-link${active == 2 ? ' active' : ''}" href="/worms/arena">Bot-Arena</a>
    </li>
    <li class="nav-item">
      <a class="nav-link${active == 3 ? ' active' : ''}" href="/worms/your-bots">Deine Bots</a>
    </li>
    <li class="nav-item">
      <a class="nav-link${active == 4 ? ' active' : ''}" href="/worms/guide">Anleitung</a>
    </li>
  </ul>`
}

/**
 * @param {import("../../data/types.js").App} App
 */
export function setupWormsBasic(App) {
  App.express.get(
    '/worms',
    safeRoute(async (req, res) => {
      const lastWormsTab = req.session.lastWormsTab ?? 'two-player'
      res.redirect('/worms/' + lastWormsTab)
    })
  )

  App.express.get(
    '/worms/two-player',
    safeRoute(async (req, res) => {
      req.session.lastWormsTab = 'two-player'
      renderPage(App, req, res, {
        page: 'worms-game',
        heading: 'Worms',
        backButton: false,
        props: {
          navigation: renderNavigation(0),
          mode: 'two',
        },
      })
    })
  )

  App.express.get(
    '/worms/single-player',
    safeRoute(async (req, res) => {
      req.session.lastWormsTab = 'single-player'
      renderPage(App, req, res, {
        page: 'worms-game',
        heading: 'Worms',
        backButton: false,
        props: {
          navigation: renderNavigation(1),
          mode: 'single',
        },
      })
    })
  )

  App.express.get(
    '/worms/guide',
    safeRoute(async (req, res) => {
      req.session.lastWormsTab = 'guide'
      renderPage(App, req, res, {
        page: 'worms',
        heading: 'Worms',
        backButton: false,
        content: `
        ${renderNavigation(4)}

        <p>Zwei Würmer und ein Kampf auf Leben und Tod - herzlich Willkommen bei Worms!</p>

        <p>Die Regeln sind denkbar einfach. Ein roter und ein grüner Wurm starten auf einem Spielfeld der Größe 72x40, an einer leicht zufälligen Position. Abwechseln, beginnend mit rot, bewegen sich die Würmer auf ein neues freie Feld. Wer gegen die Wand, den gegnerischen Wurm oder sich selbst läuft, verliert.</p>        

        <p>Steuere im 2-Spieler und Einzelspieler einen Wurm und erlebe die taktischen und strategischen Herausforderungen.</p>

        <p>In den Tabs Bot-Arena und Deine Bots kannst du Computerprogramme schreiben, die an deiner Stelle in den Kampf treten. In wenigen Schritten ist dein erster Bot geschrieben!</p>

        <p>(1. Schritt) Neuen Bot erstellen</p>

        <p>Gehe in den Tab Deine Bots. Trage dort einen epischen Namen für deinen Bot ein und klicke auf Neuen Bot erstellen.</p>

        <p>(2. Schritt) Programm schreiben</p>

        <p>Klicke auf Bearbeiten. Der Editor öffnet sich. Das Programm besteht aus einer Funktion <code>think</code>, die vor jedem Schritt aufgerufen wird. Die Vorlage enthält einen Bot, der immer geradeaus läuft. Das passiert, weil durch <code>return dir</code> immer die aktuelle Richtung als nächsten Schritt ausgegeben wird. Wie man andere Bots schreibt, wird später vorgestellt. Schließe den Editor.</p>

        <p>(3. Schritt) Gegner in Arena herausfordern</p>

        <p>Jetzt geht es an die Sache. Gehe auf Bot-Arena. Wähle zuerst deinen neu erstellen Bot aus. Wähle dann einen Gegner, den du herausfordern willst. Sobald du auf herausfordern klickst, wird ein neues Match gestartet. Nach einer Weile siehst du das Ergebnis und ein Replay.</p>

        <p>(Hurray) Du hast dein erstes Match mit deinem eigenen Bot bestritten!</p>

        <hr />

        <p>Der anspruchsvolle Teil ist nun die Programmierung der Bots. Es geht mehr um deine Ideen, weniger um den Code. Solange du deine Idee beschreiben kannst, kann immer eine LLM dir bei der Umsetzung helfen. Damit ist Worms auch für Programmieranfänger gut geeignet! Du kannst bis zu 20 Bots anlegen.</p>

        <p>Das Programm wird in modernen JavaScript geschrieben. Da die Matches auf dem Server laufen, gibt es eine Sandbox, die sicherheitskritische Funktionen deaktiviert (Netzwerkanfragen, etc..). Pro Denkvorgang, d.h. Aufruf von <code>think</code>, darf dein Programm 1 Millionen Anweisungen ausführen und hat insgesamt 1 MB an Arbeitsspeicher zur Verfügung. Im Testlauf kannst du mit <code>console.log()</code> Information in der Konsole ausgeben.</p>

        <p>Im folgenden sind ein paar Beispielprogramme gegeben, um dir ein Gefühl für die Programmierung zu geben. Gegen diese kannst du in der Arena antreten.</p>

        <h3>WändeSindToll</h3>

        <pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; "><ol style="padding-left: 3em;"><li><span style="color: rgb(139, 148, 158); font-weight: 400;">/**</span></li><li> * Bestimme bei jedem Schritt deines Bots die Laufrichtung</li><li> * </li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dx         Breite des Spielfelds (fixiert auf 74)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dy         Höhe des Spielfelds (fixiert auf 42)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number[][]</span>} board  Zwei-dimensionales Feld, board[x][y] beschreibt den Inhalt bei (x|y) mit</li><li> *                            -1 = Wand, 0 = frei, 1 = von dir besetzt, 2 = vom Gegner besetzt</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} x          x-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} y          y-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dir        Laufrichtung deines Bots (0 = hoch, 1 = rechts, 2 = runter, 3 = links)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppX       x-Koordinate des Gegners</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppY       y-Koordinate des Gegners</li><li> *</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@returns</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>}          Neue Laufrichtung</li><li> */</li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">think</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dx, dy, board, x, y, dir, oppX, oppY</span>) {</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(dir)) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li>  }</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> leftDir = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(leftDir)) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> leftDir</li><li>  }</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> rightDir = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(rightDir)) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> rightDir</li><li>  }</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span> <span style="color: rgb(139, 148, 158); font-weight: 400;">// Sackgasse</span></li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dir</span>) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> offsets = [</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, -<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [-<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>    ]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newX = x + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newY = y + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> board[newX][newY] == <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span></li><li>  }</li><li>}</li></ol></pre>

        <h3>NurZuFall</h3>

        <pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; "><ol style="padding-left: 3em;"><li><span style="color: rgb(139, 148, 158); font-weight: 400;">/**</span></li><li> * Bestimme bei jedem Schritt deines Bots die Laufrichtung</li><li> * </li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dx         Breite des Spielfelds (fixiert auf 74)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dy         Höhe des Spielfelds (fixiert auf 42)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number[][]</span>} board  Zwei-dimensionales Feld, board[x][y] beschreibt den Inhalt bei (x|y) mit</li><li> *                            -1 = Wand, 0 = frei, 1 = von dir besetzt, 2 = vom Gegner besetzt</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} x          x-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} y          y-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dir        Laufrichtung deines Bots (0 = hoch, 1 = rechts, 2 = runter, 3 = links)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppX       x-Koordinate des Gegners</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppY       y-Koordinate des Gegners</li><li> *</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@returns</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>}          Neue Laufrichtung</li><li> */</li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">think</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dx, dy, board, x, y, dir, oppX, oppY</span>) {</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> dirs = [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>]</li><li>  <span style="color: rgb(210, 168, 255); font-weight: 400;">shuffle</span>(dirs)</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">for</span> (<span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> dir <span style="color: rgb(255, 123, 114); font-weight: 400;">of</span> dirs) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(dir)) {</li><li>      <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li>    }</li><li>  }</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dir</span>) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> offsets = [</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, -<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [-<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>    ]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newX = x + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newY = y + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> board[newX][newY] == <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span></li><li>  }</li><li>}</li><li></li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">shuffle</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">array</span>) {</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">let</span> currentIndex = array.<span style="color: rgb(201, 209, 217); font-weight: 400;">length</span>;</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// While there remain elements to shuffle...</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">while</span> (currentIndex != <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>) {</li><li></li><li>    <span style="color: rgb(139, 148, 158); font-weight: 400;">// Pick a remaining element...</span></li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">let</span> randomIndex = <span style="color: rgb(210, 168, 255); font-weight: 400;">Math</span>.<span style="color: rgb(210, 168, 255); font-weight: 400;">floor</span>(<span style="color: rgb(210, 168, 255); font-weight: 400;">Math</span>.<span style="color: rgb(210, 168, 255); font-weight: 400;">random</span>() * currentIndex);</li><li>    currentIndex--;</li><li></li><li>    <span style="color: rgb(139, 148, 158); font-weight: 400;">// And swap it with the current element.</span></li><li>    [array[currentIndex], array[randomIndex]] = [</li><li>      array[randomIndex], array[currentIndex]];</li><li>  }</li><li>}</li></ol></pre>

        <h3>WickelWickel</h3>

        <pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; "><ol style="padding-left: 3em;"><li><span style="color: rgb(139, 148, 158); font-weight: 400;">/**</span></li><li> * Bestimme bei jedem Schritt deines Bots die Laufrichtung</li><li> * </li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dx         Breite des Spielfelds (fixiert auf 74)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dy         Höhe des Spielfelds (fixiert auf 42)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number[][]</span>} board  Zwei-dimensionales Feld, board[x][y] beschreibt den Inhalt bei (x|y) mit</li><li> *                            -1 = Wand, 0 = frei, 1 = von dir besetzt, 2 = vom Gegner besetzt</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} x          x-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} y          y-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dir        Laufrichtung deines Bots (0 = hoch, 1 = rechts, 2 = runter, 3 = links)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppX       x-Koordinate des Gegners</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppY       y-Koordinate des Gegners</li><li> *</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@returns</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>}          Neue Laufrichtung</li><li> */</li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">think</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dx, dy, board, x, y, dir, oppX, oppY</span>) {</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> leftDir = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(leftDir)) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> leftDir</li><li>  }</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(dir)) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li>  }</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dir</span>) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> offsets = [</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, -<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [-<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>    ]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newX = x + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newY = y + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> board[newX][newY] == <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span></li><li>  }</li><li>}</li></ol></pre>

        <h3>45gradGedreht</h3>

        <pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; "><ol style="padding-left: 3em;"><li><span style="color: rgb(255, 123, 114); font-weight: 400;">let</span> diagonal = <span style="color: rgb(210, 168, 255); font-weight: 400;">Math</span>.<span style="color: rgb(210, 168, 255); font-weight: 400;">random</span>() &lt; <span style="color: rgb(121, 192, 255); font-weight: 400;">0.5</span> ? <span style="color: rgb(165, 214, 255); font-weight: 400;">'A'</span> : <span style="color: rgb(165, 214, 255); font-weight: 400;">'B'</span> <span style="color: rgb(139, 148, 158); font-weight: 400;">// A = 'top left -&gt; bottom right, B = opposite</span></li><li></li><li><span style="color: rgb(139, 148, 158); font-weight: 400;">/**</span></li><li> * Bestimme bei jedem Schritt deines Bots die Laufrichtung in Zick-Zack-Manier</li><li> * </li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dx         Breite des Spielfelds (fixiert auf 74)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dy         Höhe des Spielfelds (fixiert auf 42)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number[][]</span>} board  Zwei-dimensionales Feld, board[x][y] beschreibt den Inhalt bei (x|y) mit</li><li> *                            -1 = Wand, 0 = frei, 1 = von dir besetzt, 2 = vom Gegner besetzt</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} x          x-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} y          y-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dir        Laufrichtung deines Bots (0 = hoch, 1 = rechts, 2 = runter, 3 = links)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppX       x-Koordinate des Gegners</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppY       y-Koordinate des Gegners</li><li> *</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@returns</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>}          Neue Laufrichtung</li><li> */</li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">think</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dx, dy, board, x, y, dir, oppX, oppY</span>) {</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> priorities = {</li><li>    <span style="color: rgb(121, 192, 255); font-weight: 400;">A</span>: [[<span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>], [<span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>], [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>], [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>]],</li><li>    <span style="color: rgb(121, 192, 255); font-weight: 400;">B</span>: [[<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>], [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>], [<span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>], [<span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]]</li><li>  }</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> [p1, p2] = priorities[diagonal][dir]</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(p1)) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span>   p1</li><li>  } <span style="color: rgb(255, 123, 114); font-weight: 400;">else</span> {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(p2)) {</li><li>      diagonal = diagonal == <span style="color: rgb(165, 214, 255); font-weight: 400;">'A'</span> ? <span style="color: rgb(165, 214, 255); font-weight: 400;">'B'</span> : <span style="color: rgb(165, 214, 255); font-weight: 400;">'A'</span></li><li>      <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> p2</li><li>    } <span style="color: rgb(255, 123, 114); font-weight: 400;">else</span> {</li><li>      <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir <span style="color: rgb(139, 148, 158); font-weight: 400;">// only choice</span></li><li>    }</li><li>  }</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Hilfsfunktion: Prüft, ob die Bewegung in eine Richtung möglich ist</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dir</span>) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> offsets = [</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, -<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>], <span style="color: rgb(139, 148, 158); font-weight: 400;">// 0 = hoch</span></li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],  <span style="color: rgb(139, 148, 158); font-weight: 400;">// 1 = rechts</span></li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],  <span style="color: rgb(139, 148, 158); font-weight: 400;">// 2 = runter</span></li><li>      [-<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>], <span style="color: rgb(139, 148, 158); font-weight: 400;">// 3 = links</span></li><li>    ]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newX = x + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newY = y + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> board[newX][newY] === <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span></li><li>  }</li><li>}</li></ol></pre>

        <h3>SchneckenHaus</h3>

        <pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; "><ol style="padding-left: 3em;"><li><span style="color: rgb(255, 123, 114); font-weight: 400;">let</span> max = <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span></li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">let</span> counter = <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span></li><li></li><li><span style="color: rgb(139, 148, 158); font-weight: 400;">/**</span></li><li> * Bestimme bei jedem Schritt deines Bots die Laufrichtung</li><li> * </li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dx         Breite des Spielfelds (fixiert auf 74)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dy         Höhe des Spielfelds (fixiert auf 42)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number[][]</span>} board  Zwei-dimensionales Feld, board[x][y] beschreibt den Inhalt bei (x|y) mit</li><li> *                            -1 = Wand, 0 = frei, 1 = von dir besetzt, 2 = vom Gegner besetzt</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} x          x-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} y          y-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dir        Laufrichtung deines Bots (0 = hoch, 1 = rechts, 2 = runter, 3 = links)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppX       x-Koordinate des Gegners</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppY       y-Koordinate des Gegners</li><li> *</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@returns</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>}          Neue Laufrichtung</li><li> */</li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">think</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dx, dy, board, x, y, dir, oppX, oppY</span>) {</li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Schreibe hier deinen Code</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (counter &gt; <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>) {</li><li>    counter--</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(dir)) <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> altDir1 = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(altDir1)) <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> altDir1</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> altDir2 = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(altDir2)) <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> altDir2</li><li>  } <span style="color: rgb(255, 123, 114); font-weight: 400;">else</span> {</li><li>    max += <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span></li><li>    counter = max - <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span></li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> altDir1 = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(altDir1)) <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> altDir1</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> altDir2 = (dir + <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>) % <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span></li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(altDir2)) <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> altDir2</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li>  }</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Hilfsfunktion: Prüft, ob die Bewegung in eine Richtung möglich ist</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dir</span>) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> offsets = [</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, -<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>], <span style="color: rgb(139, 148, 158); font-weight: 400;">// 0 = hoch</span></li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],  <span style="color: rgb(139, 148, 158); font-weight: 400;">// 1 = rechts</span></li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],  <span style="color: rgb(139, 148, 158); font-weight: 400;">// 2 = runter</span></li><li>      [-<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>], <span style="color: rgb(139, 148, 158); font-weight: 400;">// 3 = links</span></li><li>    ]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newX = x + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newY = y + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> board[newX][newY] === <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span></li><li>  }</li><li>}</li></ol></pre>

        <h3>KopfAnKopf</h3>

        <pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; "><ol style="padding-left: 3em;"><li><span style="color: rgb(139, 148, 158); font-weight: 400;">/**</span></li><li> * Bestimme bei jedem Schritt deines Bots die Laufrichtung</li><li> * </li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dx         Breite des Spielfelds (fixiert auf 74)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dy         Höhe des Spielfelds (fixiert auf 42)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number[][]</span>} board  Zwei-dimensionales Feld, board[x][y] beschreibt den Inhalt bei (x|y) mit</li><li> *                            -1 = Wand, 0 = frei, 1 = von dir besetzt, 2 = vom Gegner besetzt</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} x          x-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} y          y-Koordinate deines Bots</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} dir        Laufrichtung deines Bots (0 = hoch, 1 = rechts, 2 = runter, 3 = links)</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppX       x-Koordinate des Gegners</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@param</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>} oppY       y-Koordinate des Gegners</li><li> *</li><li> * <span style="color: rgb(255, 123, 114); font-weight: 400;">@returns</span> {<span style="color: rgb(255, 123, 114); font-weight: 400;">number</span>}          Neue Laufrichtung</li><li> */</li><li><span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">think</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dx, dy, board, x, y, dir, oppX, oppY</span>) {</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Differenzen berechnen</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> deltaX = oppX - x</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> deltaY = oppY - y</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Priorisierte Richtungen bestimmen</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> directions = [];</li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">Math</span>.<span style="color: rgb(210, 168, 255); font-weight: 400;">abs</span>(deltaX) &gt; <span style="color: rgb(210, 168, 255); font-weight: 400;">Math</span>.<span style="color: rgb(210, 168, 255); font-weight: 400;">abs</span>(deltaY)) {</li><li>    directions.<span style="color: rgb(210, 168, 255); font-weight: 400;">push</span>(deltaX &gt; <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span> ? <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span> : <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>) <span style="color: rgb(139, 148, 158); font-weight: 400;">// Rechts oder Links</span></li><li>    directions.<span style="color: rgb(210, 168, 255); font-weight: 400;">push</span>(deltaY &gt; <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span> ? <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span> : <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>) <span style="color: rgb(139, 148, 158); font-weight: 400;">// Runter oder Hoch</span></li><li>  } <span style="color: rgb(255, 123, 114); font-weight: 400;">else</span> {</li><li>    directions.<span style="color: rgb(210, 168, 255); font-weight: 400;">push</span>(deltaY &gt; <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span> ? <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span> : <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>) <span style="color: rgb(139, 148, 158); font-weight: 400;">// Runter oder Hoch</span></li><li>    directions.<span style="color: rgb(210, 168, 255); font-weight: 400;">push</span>(deltaX &gt; <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span> ? <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span> : <span style="color: rgb(121, 192, 255); font-weight: 400;">3</span>) <span style="color: rgb(139, 148, 158); font-weight: 400;">// Rechts oder Links</span></li><li>  }</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Prüfen, ob die Richtung frei ist, sonst Alternativen wählen</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">for</span> (<span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newDir <span style="color: rgb(255, 123, 114); font-weight: 400;">of</span> directions) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(newDir)) {</li><li>      <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> newDir</li><li>    }</li><li>  }</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Falls alle priorisierten Richtungen blockiert sind, bleibe stehen oder bewege dich in eine zufällige gültige Richtung</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">for</span> (<span style="color: rgb(255, 123, 114); font-weight: 400;">let</span> i = <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>; i &lt; <span style="color: rgb(121, 192, 255); font-weight: 400;">4</span>; i++) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span> (<span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(i)) {</li><li>      <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> i</li><li>    }</li><li>  }</li><li></li><li>  <span style="color: rgb(139, 148, 158); font-weight: 400;">// Keine gültige Bewegung möglich, behalte Richtung bei</span></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> dir</li><li></li><li>  <span style="color: rgb(255, 123, 114); font-weight: 400;">function</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">canGo</span>(<span style="color: rgb(201, 209, 217); font-weight: 400;">dir</span>) {</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> offsets = [</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, -<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>      [<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>],</li><li>      [-<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>],</li><li>    ]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newX = x + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">const</span> newY = y + offsets[dir][<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]</li><li>    <span style="color: rgb(255, 123, 114); font-weight: 400;">return</span> board[newX][newY] == <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span></li><li>  }</li><li>}</li></ol></pre>
        
        <div style="height: 300px;"></div>
      `,
      })
    })
  )
}
