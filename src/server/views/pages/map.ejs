<style type="text/css">
  .no-underline {
    text-decoration: none !important;
  }
  body {
    background-image:url(<%- App.config.map.background %>);
  }
  .drawing {
    width: <%= App.config.map.width %>px;
    height: <%= App.config.map.height %>px;
    position: relative;
    -webkit-user-select: none; /* iOS Safari */
    user-select: none;         /* standard */
  }
  .license {
    position: absolute;
    right: 10px;
    bottom: 10px;
  }

  /* Animate the drawing of lines */
  @keyframes drawLine {
    from {
      stroke-dashoffset: 1000;
    }
    to {
      stroke-dashoffset: 0;
    }
  }
  svg line {
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
    animation: drawLine 2s ease forwards;
  }

  /* Define the pulsing glow animation */
  @keyframes pulse {
    0% {
      filter: drop-shadow(0 0 5px var(--success));
    }
    50% {
      filter: drop-shadow(0 0 20px var(--success));
    }
    100% {
      filter: drop-shadow(0 0 5px var(--success));
    }
  }

  .fade-in {
    opacity: 0; /* Start fully transparent */
    animation: fadeIn 1s ease-out forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  /* Apply the pulse animation to green dots only */
  circle[fill="var(--success)"] {
    opacity: 0;
    animation: pulse 2s infinite, fadeIn 0.5s ease-out forwards;
  }

  svg text {
    opacity: 0; /* Start fully transparent */
    animation: fadeIn 0.5s ease-out forwards;
  }

  <% if (App.config.fullscreenMap) { %>
    .page-header {
      display: none
    }
    .container hr {
      display: none
    }
    .container .status {
      position: fixed;
      top: 10px;
      right: 20px;
      margin-top: 0;
      padding-left: 3px;
      padding-right: 3px;
      background-color: <%=App.config.statusBackgroundColor%>;
    }
  <% } %>
</style>

<div class="drawing">
  <%- props.map %>
  <span class="license">
    <%= t('background') %> <%- App.config.map.backgroundLicenseHtml %>
  </span>
  <%- props.customMapHtml %>
</div>

    
<script>
  // Select the elements that will be scrolled
  const scroller = document.documentElement; // This is the <html> tag

  // State variables
  let isDown = false;
  let startX, startY;
  let scrollTopHtml, scrollLeftDrawing;

  // We attach the main listener to the entire document/html tag
  scroller.addEventListener('mousedown', (e) => {
    // IMPORTANT: Prevent drag from starting on interactive elements
    // like links, buttons, or inputs.
    if (e.target.closest('a, button, input, select, textarea')) {
      return;
    }
      
    isDown = true;
    scroller.classList.add('is-dragging');

    // Record the initial positions and scroll offsets
    // Use clientX/clientY which are relative to the viewport and NOT affected by scroll
    startX = e.clientX; // <--- CHANGED
    startY = e.clientY; // <--- CHANGED
    scrollTopHtml = scroller.scrollTop;
    scrollLeftDrawing = scroller.scrollLeft;
  });

  // Attach mouseup to the window to catch the event even if the
  // user releases the mouse outside of the browser window.
  window.addEventListener('mouseup', () => {
    isDown = false;
    scroller.classList.remove('is-dragging');
  });

  scroller.addEventListener('mousemove', (e) => {
    if (!isDown) return; // Exit if mouse button is not held down

    e.preventDefault(); // Prevent default actions like text selection

    // Calculate mouse movement based on viewport coordinates
    const walkX = e.clientX - startX; // <--- CHANGED
    const walkY = e.clientY - startY; // <--- CHANGED

    // Apply the scroll to the correct elements
    // We subtract 'walk' because moving the mouse right (positive walk)
    // should move the content left (a negative scroll direction).
    scroller.scrollTop = scrollTopHtml - walkY;
    scroller.scrollLeft = scrollLeftDrawing - walkX;
  });

</script>

<style>
  /* Optional: Add a cursor to give user feedback */
  html.is-dragging {
    cursor: grabbing;
    user-select: none; /* Prevent text selection during drag */
  }
</style>

  