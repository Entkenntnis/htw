<canvas id="starfield"></canvas>

<% if (props.sso && props.isEduplaces) { %>
  <p style="text-align: center; font-size: 18px; max-width: 580px; margin-left: auto; margin-right: auto;">Wähle einen Benutzernamen. Dieser wird in der App angezeigt, du musst ihn dir aber nicht merken: Der Login erfolgt vollständig über Eduplaces!</p>
<% } %>

<% if (props.sso && props.isGithub) { %>
  <p style="text-align: center; font-size: 18px; max-width: 580px; margin-left: auto; margin-right: auto;"><%= t('githubSSOHint') %></p>
<% } %>

<% if (props.sso && props.isDiscord) { %>
  <p style="text-align: center; font-size: 18px; max-width: 580px; margin-left: auto; margin-right: auto;"><%= t('discordSSOHint') %></p>
<% } %>

<% if (props.messages.length > 0) { %>
  <div class="alert alert-danger"><%-props.messages.join('<br>')%></div>
<% } %>

<div style="display:flex;justify-content:center;">
  <form method="post" autocomplete="off" style="width:620px;background-color:rgba(27,39,53, 0.8);border-radius:16px;padding:20px;position:relative;z-index:100;">
    <fieldset>
      <div class="form-group row">
        <label for="inputName" class="col-md-4 col-form-label" style="margin-top: 27px;"><%= t('username') %></label>
        <div class="col-md-8">
          <small><%= t('usernameNote', {minUsername: App.config.accounts.minUsername}) %></small>
          <span id="msg-span" style="margin-left:12px;font-size:13px;vertical-align:0px;">test</span>
          <input
            class="form-control"
            id="inputName"
            type="text"
            name="username"
            value="<%=props.values.username%>"
            required
            maxlength="<%=App.config.accounts.maxUsername%>"
            pattern="<%=App.config.accounts.regex.source%>"
            autofocus
            style="margin-top:5px;"
          >
        </div>
      </div>
      <% if (!props.sso) { %>
        <% if (App.config.autoPassword && App.config.allowNewAutoPassword) { %>
          <div class="form-group row" style="margin-top:32px;">
            <label class="col-md-4 col-form-label"></label>
            <div class="col-md-8">
              <p>Dein Passwort wird automatisch erzeugt und in diesem Browser gespeichert. Gehe in dein Profil, um ein eigenes Passwort zu setzen.
              </p>
            </div>
          </div>
        <% } %>
        <div style="margin-top: 48px;" class="form-group row <%= App.config.autoPassword && App.config.allowNewAutoPassword ? 'd-none' : '' %>">
          <label for="inputPw1" class="col-md-4 col-form-label" style="margin-top: 27px;"><%= t('password') %></label>
          <div class="col-md-8">
            <small><%= t('passwordNote', {minPassword: App.config.accounts.minPw}) %></small>
            <input
              class="form-control"
              id="inputPw1"
              type="password"
              name="pw1"
              value="<%=props.values.pw1%>"
              required
              maxlength="<%=App.config.accounts.maxPw%>"
              minlength="<%=App.config.accounts.minPw%>"
              style="margin-top:5px;"
            >
          </div>
      </div>
      <div class="form-group row <%= App.config.autoPassword && App.config.allowNewAutoPassword ? 'd-none' : '' %>">
        <label for="inputPw2" class="col-md-4 col-form-label"><%= t('repeatPassword') %></label>
        <div class="col-md-8">
          <input
            class="form-control"
            id="inputPw2"
            type="password"
            name="pw2"
            value="<%=props.values.pw2%>"
            required
            maxlength="<%=App.config.accounts.maxPw%>"
            minlength="<%=App.config.accounts.minPw%>"
          >
          </div>
        </div>
      <% } %>
      <div class="form-group row">
        <div class="col-md-6 offset-md-4">
          <p style="margin-top:8px;margin-bottom:32px;">
            <%- t('noteOn_', {link: `<a href="${prefix}/privacy" target="_blank">${ t('dataProtection') }</a>`}) %>
          </p>
          <button type="submit" class="btn btn-success" id="submit-button"><%= t('submit') %></button>
        </div>
      </div>
      <input type="hidden" name="csrf" value="<%=props.token%>"/>
      <input type="hidden" name="room" value="<%=props.room%>" />
    </fieldset>
  </form>
</div>

<% if (props.sso && props.isEduplaces) { %>
  <p style="text-align: center; font-size: 12px; margin-top: 24px; color: gray; max-width: 66ch; margin-left: auto; margin-right: auto;">Falls du nach der Schulzeit deinen Account weiterverwenden willst, kannst du im Profil ein Passwort festlegen und dich  unabhängig von Eduplaces einloggen. Das ist vollkommen optional und du kannst das zu jeder Zeit später machen.</p>
<% } %>


<% if (props.sso && props.isGithub) { %>
  <p style="text-align: center; font-size: 12px; margin-top: 24px; color: gray; max-width: 66ch; margin-left: auto; margin-right: auto;"><%= t('githubPasswordHint') %></p>
<% } %>


<% if (props.sso && props.isDiscord) { %>
  <p style="text-align: center; font-size: 12px; margin-top: 24px; color: gray; max-width: 66ch; margin-left: auto; margin-right: auto;"><%= t('discordPasswordHint') %></p>
<% } %>


<script>
  // --- START: Original Form Validation Logic ---
  var state = {
    msg: '',
    class: 'text-danger'
  }
  
  const msgSpan = document.getElementById('msg-span')
  const nameInput = document.getElementById('inputName')
  const submitButton = document.getElementById('submit-button')
  
  function render() {
    msgSpan.innerHTML = state.msg ? state.msg : '&nbsp;'
    msgSpan.className = state.class
  }

  nameInput.addEventListener('input', checkUsername)
  
  function checkUsername() {
    const name = nameInput.value.trim()
    if (/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(name)) {
      setTimeout(() => {
        alert('<%= t('warnEmail') %>')
      }, 100)
    }
    if (name.length == 0) {
      state.msg = ''
      state.class = 'text-danger'
    } else if (name.length < <%= App.config.accounts.minUsername %>) {
      state.msg = '<%= t('nameTooShort')%>'
      state.class = 'text-danger'
    } else if (!/<%=App.config.accounts.regex.source%>/.test(name)) {
      state.msg = '<%= t('nameInvalidChars')%>'
      state.class = 'text-danger'
    } else {
      state.msg = '<%= t('checking')%> ...'
      state.class = 'text-secondary'
      
      const xhr = new XMLHttpRequest();
      xhr.open('GET', '/check/' + encodeURIComponent(name));
      xhr.onload = function() {
        if (xhr.status === 200) {
          if (xhr.responseText === nameInput.value.trim()) {
            state.msg = '✓ <%= t('available')%>'
            state.class = 'text-info'
            render()
            <% if (App.config.autoPassword && App.config.allowNewAutoPassword) { %>
              let pw = ''
              for (let i = 0; i < 32; i++) {
                pw += Math.floor(10*Math.random()).toString()
              }
              document.getElementById('inputPw1').value = pw
              document.getElementById('inputPw2').value = pw
              sessionStorage.setItem('htw_temp_local_user', JSON.stringify({name:name, password: pw}))
            <% } %>
          } else if (xhr.responseText === '²bad²') {
            state.msg = '<%= t('nameExists')%>'
            state.class = 'text-danger'
            render()
          } else {
            console.log('Something went wrong!');
          }
        } else {
          console.log('Request failed. Returned status of ' + xhr.status);
        }
      };
      xhr.send();
    }
    render()
  }
  
  checkUsername()
  render()
  // --- END: Original Form Validation Logic ---


  // --- START: New Starfield Canvas Animation ---
  const canvas = document.getElementById('starfield');
  const ctx = canvas.getContext('2d');

  let stars = [];
  const starCount = 500; // Adjust for more/less stars
  
  function setCanvasSize() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  // A star is an object with position, size, speed, and blink properties
  function createStar() {
    return {
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      size: Math.random() * 2 + 1.3, // Stars of size 1.3px to 3.3px
      speed: Math.random() * 0.1 + 0.03, // Different speeds for parallax
      // --- Properties for blinking ---
      alpha: Math.random() * 0.5 + 0.5, // Start with a random opacity
      blinkSpeed: 1 / (Math.random() * 300 + 70), // How fast it blinks
      blinkDirection: Math.random() > 0.5 ? 1 : -1 // 1 for brightening, -1 for dimming
    };
  }
  
  function initializeStars() {
    stars = [];
    for (let i = 0; i < starCount; i++) {
      stars.push(createStar());
    }
  }

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    stars.forEach(star => {
      // --- Update blinking ---
      star.alpha += star.blinkSpeed * star.blinkDirection;
      
      // Reverse direction if it's too bright or too dim to create a pulse
      if (star.alpha >= 1) {
        star.alpha = 1; // Clamp to max
        star.blinkDirection = -1;
      } else if (star.alpha <= 0.3) { // Use a minimum opacity so stars don't disappear
        star.alpha = 0.3; // Clamp to min
        star.blinkDirection = 1;
      }

      // --- Draw the star with its current opacity ---
      ctx.fillStyle = `rgba(255, 255, 255, ${star.alpha})`;
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.size / 2, 0, Math.PI * 2);
      ctx.fill();
      
      // --- Move the star ---
      star.y -= star.speed;
      
      // If a star goes off-screen to the top, reset it to the bottom
      if (star.y < 0) {
        star.y = canvas.height;
        star.x = Math.random() * canvas.width;
        // Also reset its alpha to maintain randomness
        star.alpha = Math.random() * 0.5 + 0.5;
      }
    });
    
    // Request the next animation frame
    requestAnimationFrame(draw);
  }

  // Set initial size and create stars
  setCanvasSize();
  initializeStars();
  
  // Start the animation loop
  requestAnimationFrame(draw);
  
  // Handle window resizing to make the background responsive
  window.addEventListener('resize', () => {
    setCanvasSize();
    initializeStars(); // Re-create stars for the new size
  });
  // --- END: New Starfield Canvas Animation ---

</script>

<style>
  /* Basic styling to make the canvas a non-interactive background */
  #starfield {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1; /* Place it behind all other content */
    background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);
  }
  
  .container > h2 {
    text-align: center;
  }
</style>